import os
import re
import streamlit as st
import pandas as pd
import gspread
from io import BytesIO, StringIO
from oauth2client.service_account import ServiceAccountCredentials
from concurrent.futures import ThreadPoolExecutor

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
class AppConfig:
    PAGE_TITLE = "üîç –ü–æ–∏—Å–∫ –ø–æ Google –¢–∞–±–ª–∏—Ü–µ"
    PAGE_LAYOUT = "wide"
    CREDENTIALS_FILE = "parsing.json"
    SCOPE = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive"
    ]
    # –ü–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
    PASSWORD = "admin123"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å

# --- –†–∞–±–æ—Ç–∞ —Å Google Sheets ---
class GoogleSheetsConnector:
    @staticmethod
    @st.cache_resource
    def get_client():
        creds = ServiceAccountCredentials.from_json_keyfile_name(
            AppConfig.CREDENTIALS_FILE,
            AppConfig.SCOPE
        )
        return gspread.authorize(creds)

    @staticmethod
    def extract_sheet_id(url):
        match = re.search(r"/d/([a-zA-Z0-9-_]+)", url)
        return match.group(1) if match else None

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
class DataProcessor:

    @staticmethod
    def load_worksheet(ws):
        try:
            data = ws.get_all_values()  # —Å—á–∏—Ç—ã–≤–∞–µ–º –í–°–Å –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
            if not data or len(data) < 2:
                return None

            df = pd.DataFrame(data[1:], columns=data[0])  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
            df['–õ–∏—Å—Ç'] = ws.title

            for col in df.columns:
                df[col] = df[col].astype(str).str.strip()

            return df
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—Å—Ç–∞ '{ws.title}': {e}")
            return None
        

    @staticmethod
    def normalize_text(text):
        text = str(text).lower()

        replacements = {
            '—Ö': 'x',
            '‚Äì': '-',
            '‚Äî': '-',
            '—ë': '–µ',
            '–º–º2': '–º–º¬≤',
            '–º–º^2': '–º–º¬≤',
            '—Å–º2': '—Å–º¬≤',
            '—Å–º^2': '—Å–º¬≤',
            '–º2': '–º¬≤',
            '–º^2': '–º¬≤',
        }

        for k, v in replacements.items():
            text = text.replace(k, v)

        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —á–∏—Å–ª–æ–º –∏ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å—é
        text = re.sub(r'(?<=\d)\s+(?=–º–º¬≤|—Å–º¬≤|–º¬≤)', '', text)

        return text

    @staticmethod
    def split_preserve_sizes(text):
        text = DataProcessor.normalize_text(text)

        # –°–æ–µ–¥–∏–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã: 2 x 2.5 => 2x2.5
        text = re.sub(
            r'(\d+(?:[.,]\d+)?)\s*[x—Ö√ó*]\s*(\d+(?:[.,]\d+)?)',
            r'\1x\2',
            text
        )

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è: "–º–º 2" -> "–º–º¬≤", "—Å–º^2" -> "—Å–º¬≤", –∏ —Ç.–¥.
        text = re.sub(r'\b–º–º\s*[\^]?\s*2\b', '–º–º¬≤', text)
        text = re.sub(r'\b—Å–º\s*[\^]?\s*2\b', '—Å–º¬≤', text)
        text = re.sub(r'\b–º\s*[\^]?\s*2\b', '–º¬≤', text)

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–ª–æ–≤–∞, –æ—Ç–¥–µ–ª—å–Ω–æ –≤—ã–¥–µ–ª—è—è —Ä–∞–∑–º–µ—Ä –∏ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
        matches = re.findall(r'\d+(?:[.,]\d+)?x\d+(?:[.,]\d+)?|–º–º¬≤|—Å–º¬≤|–º¬≤|\w+', text)

        return matches

    @staticmethod
    def match_query(row_text, query_words, require_all=False):
        row_words = DataProcessor.split_preserve_sizes(row_text)
        match_count = sum(1 for word in query_words if word in row_words)
        if require_all:
            return match_count if match_count == len(query_words) else 0
        return match_count

# --- UI ---
class UIComponents:
    @staticmethod
    def setup_page():
        st.set_page_config(
            page_title=AppConfig.PAGE_TITLE,
            layout=AppConfig.PAGE_LAYOUT
        )
        st.title(AppConfig.PAGE_TITLE)


    @staticmethod
    def show_results(results, selected_columns):
        if not results.empty:
            results = results.reset_index(drop=True)
            results.index = results.index + 2
            results.index.name = "‚Ññ —Å—Ç—Ä–æ–∫–∏"

            results["‚Ññ —Å—Ç—Ä–æ–∫–∏"] = results.index
            if selected_columns:
                filtered_results = results[[col for col in selected_columns if col in results.columns]]
            else:
                filtered_results = results

            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è HTML-–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            html_df = filtered_results.copy()
            if "URL" in html_df.columns:
                html_df["URL"] = html_df["URL"].apply(
                    lambda x: f'<a href="{x}" target="_blank">{x}</a>' if x.startswith("http") else x
                )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ –≤–∏–¥–µ HTML
            st.markdown(
                html_df.to_html(escape=False, index=False),
                unsafe_allow_html=True
            )

            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –±–µ–∑ HTML-—Ç–µ–≥–æ–≤)
            excel_buffer = BytesIO()
            csv_buffer = StringIO()

            filtered_results.to_excel(excel_buffer, index=False, engine='openpyxl')
            filtered_results.to_csv(csv_buffer, index=False, encoding='utf-8-sig')

            st.download_button(
                label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel",
                data=excel_buffer.getvalue(),
                file_name="results.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

            st.download_button(
                label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV",
                data=csv_buffer.getvalue(),
                file_name="results.csv",
                mime="text/csv"
            )


# --- –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
class GoogleSheetSearchApp:
    def __init__(self):
        UIComponents.setup_page()
        self.client = GoogleSheetsConnector.get_client()
        self.initialize_session_state()
        self.authenticate()

    def initialize_session_state(self):
        if 'combined_df' not in st.session_state:
            st.session_state.combined_df = None
        if 'sheet_id' not in st.session_state:
            st.session_state.sheet_id = None
        if 'authenticated' not in st.session_state:
            st.session_state.authenticated = False

    def authenticate(self):
        if not st.session_state.authenticated:
            # –°–æ–∑–¥–∞–µ–º 4 –∫–æ–ª–æ–Ω–∫–∏, –ø–æ–ª–µ –≤–≤–æ–¥–∞ –±—É–¥–µ—Ç –≤ –ø–µ—Ä–≤–æ–π (1/4 —à–∏—Ä–∏–Ω—ã)
            col1, _, _, _ = st.columns([1, 1, 1, 1])
            
            with col1:
                password = st.text_input("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞", 
                                    type="password",
                                    key="password_input")
                
                if st.button("–í–æ–π—Ç–∏", key="login_button"):
                    if password == AppConfig.PASSWORD:
                        st.session_state.authenticated = True
                        st.rerun()
                    else:
                        st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
            return
        
        # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
        self.show_main_app()

    def process_sheets(self, spreadsheet):
        with ThreadPoolExecutor() as executor:
            dfs = list(executor.map(DataProcessor.load_worksheet, spreadsheet.worksheets()))
        return [df for df in dfs if df is not None]

    def load_data(self, sheet_url):
        sheet_id = GoogleSheetsConnector.extract_sheet_id(sheet_url)
        if not sheet_id:
            st.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Google –¢–∞–±–ª–∏—Ü—É")
            return False

        if st.session_state.sheet_id != sheet_id:
            try:
                spreadsheet = self.client.open_by_key(sheet_id)
                all_data = self.process_sheets(spreadsheet)

                if not all_data:
                    st.warning("‚ö†Ô∏è –í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                    return False

                st.session_state.combined_df = pd.concat(all_data, ignore_index=True)
                st.session_state.sheet_id = sheet_id
                st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                return True
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
                return False
        return True

    def show_main_app(self):
        sheet_url = st.text_input("üìé –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Google –¢–∞–±–ª–∏—Ü—É", key="sheet_url")
        
        if sheet_url:
            if st.button("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ") or st.session_state.combined_df is not None:
                if self.load_data(sheet_url) and st.session_state.combined_df is not None:
                    combined_df = st.session_state.combined_df

                    column = st.selectbox(
                        "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞",
                        combined_df.columns,
                        key="search_column"
                    )

                    all_columns = ['‚Ññ —Å—Ç—Ä–æ–∫–∏', '–õ–∏—Å—Ç'] + [col for col in combined_df.columns if col != '–õ–∏—Å—Ç']
                    selected_columns = st.multiselect(
                        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞",
                        options=all_columns,
                        default=[],
                        key="output_columns",
                        help="–ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π, –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏."
                    )

                    search_query = st.text_input("üîé –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —á–∞—Å—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞", key="search_query")

                    exact_match = st.checkbox("üß© –¢–æ–ª—å–∫–æ –ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–ª–æ–≤", value=True)
                    partial_match = st.checkbox("üîç –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ")

                    if exact_match and partial_match:
                        st.warning("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞")
                        return

                    if search_query:
                        query_words = DataProcessor.split_preserve_sizes(search_query)

                        require_all = exact_match and not partial_match
                        combined_df = combined_df.copy()
                        combined_df['__match_count'] = combined_df[column].apply(
                            lambda text: DataProcessor.match_query(text, query_words, require_all=require_all)
                        )

                        results = combined_df[combined_df['__match_count'] > 0]
                        results = results.sort_values(by='__match_count', ascending=False)
                        results = results.drop(columns='__match_count')

                        st.success(f"üîé –ù–∞–π–¥–µ–Ω–æ: {len(results)} –∑–∞–ø–∏—Å–µ–π")
                        UIComponents.show_results(results, selected_columns)

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == "__main__":
    GoogleSheetSearchApp()